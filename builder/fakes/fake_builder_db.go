// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/builder"
)

type FakeBuilderDB struct {
	ScheduleBuildStub        func(job string, build string, serial bool) (bool, error)
	scheduleBuildMutex       sync.RWMutex
	scheduleBuildArgsForCall []struct {
		job    string
		build  string
		serial bool
	}
	scheduleBuildReturns struct {
		result1 bool
		result2 error
	}
	StartBuildStub        func(job string, build string, abortURL string) (bool, error)
	startBuildMutex       sync.RWMutex
	startBuildArgsForCall []struct {
		job      string
		build    string
		abortURL string
	}
	startBuildReturns struct {
		result1 bool
		result2 error
	}
}

func (fake *FakeBuilderDB) ScheduleBuild(job string, build string, serial bool) (bool, error) {
	fake.scheduleBuildMutex.Lock()
	fake.scheduleBuildArgsForCall = append(fake.scheduleBuildArgsForCall, struct {
		job    string
		build  string
		serial bool
	}{job, build, serial})
	fake.scheduleBuildMutex.Unlock()
	if fake.ScheduleBuildStub != nil {
		return fake.ScheduleBuildStub(job, build, serial)
	} else {
		return fake.scheduleBuildReturns.result1, fake.scheduleBuildReturns.result2
	}
}

func (fake *FakeBuilderDB) ScheduleBuildCallCount() int {
	fake.scheduleBuildMutex.RLock()
	defer fake.scheduleBuildMutex.RUnlock()
	return len(fake.scheduleBuildArgsForCall)
}

func (fake *FakeBuilderDB) ScheduleBuildArgsForCall(i int) (string, string, bool) {
	fake.scheduleBuildMutex.RLock()
	defer fake.scheduleBuildMutex.RUnlock()
	return fake.scheduleBuildArgsForCall[i].job, fake.scheduleBuildArgsForCall[i].build, fake.scheduleBuildArgsForCall[i].serial
}

func (fake *FakeBuilderDB) ScheduleBuildReturns(result1 bool, result2 error) {
	fake.ScheduleBuildStub = nil
	fake.scheduleBuildReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBuilderDB) StartBuild(job string, build string, abortURL string) (bool, error) {
	fake.startBuildMutex.Lock()
	fake.startBuildArgsForCall = append(fake.startBuildArgsForCall, struct {
		job      string
		build    string
		abortURL string
	}{job, build, abortURL})
	fake.startBuildMutex.Unlock()
	if fake.StartBuildStub != nil {
		return fake.StartBuildStub(job, build, abortURL)
	} else {
		return fake.startBuildReturns.result1, fake.startBuildReturns.result2
	}
}

func (fake *FakeBuilderDB) StartBuildCallCount() int {
	fake.startBuildMutex.RLock()
	defer fake.startBuildMutex.RUnlock()
	return len(fake.startBuildArgsForCall)
}

func (fake *FakeBuilderDB) StartBuildArgsForCall(i int) (string, string, string) {
	fake.startBuildMutex.RLock()
	defer fake.startBuildMutex.RUnlock()
	return fake.startBuildArgsForCall[i].job, fake.startBuildArgsForCall[i].build, fake.startBuildArgsForCall[i].abortURL
}

func (fake *FakeBuilderDB) StartBuildReturns(result1 bool, result2 error) {
	fake.StartBuildStub = nil
	fake.startBuildReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

var _ builder.BuilderDB = new(FakeBuilderDB)
