// This file was generated by counterfeiter
package fakebuilder

import (
	"github.com/winston-ci/winston/builds"
	"github.com/winston-ci/winston/config"

	"sync"
)

type FakeBuilder struct {
	CreateStub        func(config.Job, map[string]builds.Version) (builds.Build, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 config.Job
		arg2 map[string]builds.Version
	}
	createReturns struct {
		result1 builds.Build
		result2 error
	}
	StartStub        func(builds.Build, config.Job, map[string]builds.Version) (builds.Build, error)
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 builds.Build
		arg2 config.Job
		arg3 map[string]builds.Version
	}
	startReturns struct {
		result1 builds.Build
		result2 error
	}
}

func (fake *FakeBuilder) Create(arg1 config.Job, arg2 map[string]builds.Version) (builds.Build, error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 config.Job
		arg2 map[string]builds.Version
	}{arg1, arg2})
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeBuilder) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBuilder) CreateArgsForCall(i int) (config.Job, map[string]builds.Version) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2
}

func (fake *FakeBuilder) CreateReturns(result1 builds.Build, result2 error) {
	fake.createReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuilder) Start(arg1 builds.Build, arg2 config.Job, arg3 map[string]builds.Version) (builds.Build, error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 builds.Build
		arg2 config.Job
		arg3 map[string]builds.Version
	}{arg1, arg2, arg3})
	if fake.StartStub != nil {
		return fake.StartStub(arg1, arg2, arg3)
	} else {
		return fake.startReturns.result1, fake.startReturns.result2
	}
}

func (fake *FakeBuilder) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeBuilder) StartArgsForCall(i int) (builds.Build, config.Job, map[string]builds.Version) {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].arg1, fake.startArgsForCall[i].arg2, fake.startArgsForCall[i].arg3
}

func (fake *FakeBuilder) StartReturns(result1 builds.Build, result2 error) {
	fake.startReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}
