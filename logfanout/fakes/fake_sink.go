// This file was generated by counterfeiter
package fakes

import (
	"encoding/json"
	"sync"

	"github.com/concourse/atc/logfanout"
)

type FakeSink struct {
	WriteMessageStub        func(*json.RawMessage) error
	writeMessageMutex       sync.RWMutex
	writeMessageArgsForCall []struct {
		arg1 *json.RawMessage
	}
	writeMessageReturns struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns struct {
		result1 error
	}
}

func (fake *FakeSink) WriteMessage(arg1 *json.RawMessage) error {
	fake.writeMessageMutex.Lock()
	fake.writeMessageArgsForCall = append(fake.writeMessageArgsForCall, struct {
		arg1 *json.RawMessage
	}{arg1})
	fake.writeMessageMutex.Unlock()
	if fake.WriteMessageStub != nil {
		return fake.WriteMessageStub(arg1)
	} else {
		return fake.writeMessageReturns.result1
	}
}

func (fake *FakeSink) WriteMessageCallCount() int {
	fake.writeMessageMutex.RLock()
	defer fake.writeMessageMutex.RUnlock()
	return len(fake.writeMessageArgsForCall)
}

func (fake *FakeSink) WriteMessageArgsForCall(i int) *json.RawMessage {
	fake.writeMessageMutex.RLock()
	defer fake.writeMessageMutex.RUnlock()
	return fake.writeMessageArgsForCall[i].arg1
}

func (fake *FakeSink) WriteMessageReturns(result1 error) {
	fake.WriteMessageStub = nil
	fake.writeMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSink) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeSink) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeSink) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

var _ logfanout.Sink = new(FakeSink)
