// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/resource"
)

type FakeTracker struct {
	InitStub        func(resource.Session, resource.ResourceType, atc.Tags) (resource.Resource, error)
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		arg1 resource.Session
		arg2 resource.ResourceType
		arg3 atc.Tags
	}
	initReturns struct {
		result1 resource.Resource
		result2 error
	}
}

func (fake *FakeTracker) Init(arg1 resource.Session, arg2 resource.ResourceType, arg3 atc.Tags) (resource.Resource, error) {
	fake.initMutex.Lock()
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		arg1 resource.Session
		arg2 resource.ResourceType
		arg3 atc.Tags
	}{arg1, arg2, arg3})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub(arg1, arg2, arg3)
	} else {
		return fake.initReturns.result1, fake.initReturns.result2
	}
}

func (fake *FakeTracker) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeTracker) InitArgsForCall(i int) (resource.Session, resource.ResourceType, atc.Tags) {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return fake.initArgsForCall[i].arg1, fake.initArgsForCall[i].arg2, fake.initArgsForCall[i].arg3
}

func (fake *FakeTracker) InitReturns(result1 resource.Resource, result2 error) {
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 resource.Resource
		result2 error
	}{result1, result2}
}

var _ resource.Tracker = new(FakeTracker)
