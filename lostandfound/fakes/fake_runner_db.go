// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/lostandfound"
)

type FakeRunnerDB struct {
	LeaseCacheInvalidationStub        func(interval time.Duration) (db.Lease, bool, error)
	leaseCacheInvalidationMutex       sync.RWMutex
	leaseCacheInvalidationArgsForCall []struct {
		interval time.Duration
	}
	leaseCacheInvalidationReturns struct {
		result1 db.Lease
		result2 bool
		result3 error
	}
}

func (fake *FakeRunnerDB) LeaseCacheInvalidation(interval time.Duration) (db.Lease, bool, error) {
	fake.leaseCacheInvalidationMutex.Lock()
	fake.leaseCacheInvalidationArgsForCall = append(fake.leaseCacheInvalidationArgsForCall, struct {
		interval time.Duration
	}{interval})
	fake.leaseCacheInvalidationMutex.Unlock()
	if fake.LeaseCacheInvalidationStub != nil {
		return fake.LeaseCacheInvalidationStub(interval)
	} else {
		return fake.leaseCacheInvalidationReturns.result1, fake.leaseCacheInvalidationReturns.result2, fake.leaseCacheInvalidationReturns.result3
	}
}

func (fake *FakeRunnerDB) LeaseCacheInvalidationCallCount() int {
	fake.leaseCacheInvalidationMutex.RLock()
	defer fake.leaseCacheInvalidationMutex.RUnlock()
	return len(fake.leaseCacheInvalidationArgsForCall)
}

func (fake *FakeRunnerDB) LeaseCacheInvalidationArgsForCall(i int) time.Duration {
	fake.leaseCacheInvalidationMutex.RLock()
	defer fake.leaseCacheInvalidationMutex.RUnlock()
	return fake.leaseCacheInvalidationArgsForCall[i].interval
}

func (fake *FakeRunnerDB) LeaseCacheInvalidationReturns(result1 db.Lease, result2 bool, result3 error) {
	fake.LeaseCacheInvalidationStub = nil
	fake.leaseCacheInvalidationReturns = struct {
		result1 db.Lease
		result2 bool
		result3 error
	}{result1, result2, result3}
}

var _ lostandfound.RunnerDB = new(FakeRunnerDB)
