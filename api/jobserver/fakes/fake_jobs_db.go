// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/api/jobserver"
	"github.com/concourse/atc/builds"
)

type FakeJobsDB struct {
	GetJobBuildStub        func(job string, build string) (builds.Build, error)
	getJobBuildMutex       sync.RWMutex
	getJobBuildArgsForCall []struct {
		job   string
		build string
	}
	getJobBuildReturns struct {
		result1 builds.Build
		result2 error
	}
	GetAllJobBuildsStub        func(job string) ([]builds.Build, error)
	getAllJobBuildsMutex       sync.RWMutex
	getAllJobBuildsArgsForCall []struct {
		job string
	}
	getAllJobBuildsReturns struct {
		result1 []builds.Build
		result2 error
	}
}

func (fake *FakeJobsDB) GetJobBuild(job string, build string) (builds.Build, error) {
	fake.getJobBuildMutex.Lock()
	fake.getJobBuildArgsForCall = append(fake.getJobBuildArgsForCall, struct {
		job   string
		build string
	}{job, build})
	fake.getJobBuildMutex.Unlock()
	if fake.GetJobBuildStub != nil {
		return fake.GetJobBuildStub(job, build)
	} else {
		return fake.getJobBuildReturns.result1, fake.getJobBuildReturns.result2
	}
}

func (fake *FakeJobsDB) GetJobBuildCallCount() int {
	fake.getJobBuildMutex.RLock()
	defer fake.getJobBuildMutex.RUnlock()
	return len(fake.getJobBuildArgsForCall)
}

func (fake *FakeJobsDB) GetJobBuildArgsForCall(i int) (string, string) {
	fake.getJobBuildMutex.RLock()
	defer fake.getJobBuildMutex.RUnlock()
	return fake.getJobBuildArgsForCall[i].job, fake.getJobBuildArgsForCall[i].build
}

func (fake *FakeJobsDB) GetJobBuildReturns(result1 builds.Build, result2 error) {
	fake.GetJobBuildStub = nil
	fake.getJobBuildReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeJobsDB) GetAllJobBuilds(job string) ([]builds.Build, error) {
	fake.getAllJobBuildsMutex.Lock()
	fake.getAllJobBuildsArgsForCall = append(fake.getAllJobBuildsArgsForCall, struct {
		job string
	}{job})
	fake.getAllJobBuildsMutex.Unlock()
	if fake.GetAllJobBuildsStub != nil {
		return fake.GetAllJobBuildsStub(job)
	} else {
		return fake.getAllJobBuildsReturns.result1, fake.getAllJobBuildsReturns.result2
	}
}

func (fake *FakeJobsDB) GetAllJobBuildsCallCount() int {
	fake.getAllJobBuildsMutex.RLock()
	defer fake.getAllJobBuildsMutex.RUnlock()
	return len(fake.getAllJobBuildsArgsForCall)
}

func (fake *FakeJobsDB) GetAllJobBuildsArgsForCall(i int) string {
	fake.getAllJobBuildsMutex.RLock()
	defer fake.getAllJobBuildsMutex.RUnlock()
	return fake.getAllJobBuildsArgsForCall[i].job
}

func (fake *FakeJobsDB) GetAllJobBuildsReturns(result1 []builds.Build, result2 error) {
	fake.GetAllJobBuildsStub = nil
	fake.getAllJobBuildsReturns = struct {
		result1 []builds.Build
		result2 error
	}{result1, result2}
}

var _ jobserver.JobsDB = new(FakeJobsDB)
