// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/api/buildserver"
	"github.com/concourse/atc/builds"
	"github.com/concourse/atc/db"
)

type FakeBuildsDB struct {
	GetBuildStub        func(buildID int) (builds.Build, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		buildID int
	}
	getBuildReturns struct {
		result1 builds.Build
		result2 error
	}
	GetAllBuildsStub        func() ([]builds.Build, error)
	getAllBuildsMutex       sync.RWMutex
	getAllBuildsArgsForCall []struct{}
	getAllBuildsReturns struct {
		result1 []builds.Build
		result2 error
	}
	CreateOneOffBuildStub        func() (builds.Build, error)
	createOneOffBuildMutex       sync.RWMutex
	createOneOffBuildArgsForCall []struct{}
	createOneOffBuildReturns struct {
		result1 builds.Build
		result2 error
	}
	AbortBuildStub        func(buildID int) error
	abortBuildMutex       sync.RWMutex
	abortBuildArgsForCall []struct {
		buildID int
	}
	abortBuildReturns struct {
		result1 error
	}
	BuildEventsStub        func(buildID int) ([]db.BuildEvent, error)
	buildEventsMutex       sync.RWMutex
	buildEventsArgsForCall []struct {
		buildID int
	}
	buildEventsReturns struct {
		result1 []db.BuildEvent
		result2 error
	}
}

func (fake *FakeBuildsDB) GetBuild(buildID int) (builds.Build, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(buildID)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2
	}
}

func (fake *FakeBuildsDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildReturns(result1 builds.Build, result2 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) GetAllBuilds() ([]builds.Build, error) {
	fake.getAllBuildsMutex.Lock()
	fake.getAllBuildsArgsForCall = append(fake.getAllBuildsArgsForCall, struct{}{})
	fake.getAllBuildsMutex.Unlock()
	if fake.GetAllBuildsStub != nil {
		return fake.GetAllBuildsStub()
	} else {
		return fake.getAllBuildsReturns.result1, fake.getAllBuildsReturns.result2
	}
}

func (fake *FakeBuildsDB) GetAllBuildsCallCount() int {
	fake.getAllBuildsMutex.RLock()
	defer fake.getAllBuildsMutex.RUnlock()
	return len(fake.getAllBuildsArgsForCall)
}

func (fake *FakeBuildsDB) GetAllBuildsReturns(result1 []builds.Build, result2 error) {
	fake.GetAllBuildsStub = nil
	fake.getAllBuildsReturns = struct {
		result1 []builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) CreateOneOffBuild() (builds.Build, error) {
	fake.createOneOffBuildMutex.Lock()
	fake.createOneOffBuildArgsForCall = append(fake.createOneOffBuildArgsForCall, struct{}{})
	fake.createOneOffBuildMutex.Unlock()
	if fake.CreateOneOffBuildStub != nil {
		return fake.CreateOneOffBuildStub()
	} else {
		return fake.createOneOffBuildReturns.result1, fake.createOneOffBuildReturns.result2
	}
}

func (fake *FakeBuildsDB) CreateOneOffBuildCallCount() int {
	fake.createOneOffBuildMutex.RLock()
	defer fake.createOneOffBuildMutex.RUnlock()
	return len(fake.createOneOffBuildArgsForCall)
}

func (fake *FakeBuildsDB) CreateOneOffBuildReturns(result1 builds.Build, result2 error) {
	fake.CreateOneOffBuildStub = nil
	fake.createOneOffBuildReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildsDB) AbortBuild(buildID int) error {
	fake.abortBuildMutex.Lock()
	fake.abortBuildArgsForCall = append(fake.abortBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.abortBuildMutex.Unlock()
	if fake.AbortBuildStub != nil {
		return fake.AbortBuildStub(buildID)
	} else {
		return fake.abortBuildReturns.result1
	}
}

func (fake *FakeBuildsDB) AbortBuildCallCount() int {
	fake.abortBuildMutex.RLock()
	defer fake.abortBuildMutex.RUnlock()
	return len(fake.abortBuildArgsForCall)
}

func (fake *FakeBuildsDB) AbortBuildArgsForCall(i int) int {
	fake.abortBuildMutex.RLock()
	defer fake.abortBuildMutex.RUnlock()
	return fake.abortBuildArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) AbortBuildReturns(result1 error) {
	fake.AbortBuildStub = nil
	fake.abortBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildsDB) BuildEvents(buildID int) ([]db.BuildEvent, error) {
	fake.buildEventsMutex.Lock()
	fake.buildEventsArgsForCall = append(fake.buildEventsArgsForCall, struct {
		buildID int
	}{buildID})
	fake.buildEventsMutex.Unlock()
	if fake.BuildEventsStub != nil {
		return fake.BuildEventsStub(buildID)
	} else {
		return fake.buildEventsReturns.result1, fake.buildEventsReturns.result2
	}
}

func (fake *FakeBuildsDB) BuildEventsCallCount() int {
	fake.buildEventsMutex.RLock()
	defer fake.buildEventsMutex.RUnlock()
	return len(fake.buildEventsArgsForCall)
}

func (fake *FakeBuildsDB) BuildEventsArgsForCall(i int) int {
	fake.buildEventsMutex.RLock()
	defer fake.buildEventsMutex.RUnlock()
	return fake.buildEventsArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) BuildEventsReturns(result1 []db.BuildEvent, result2 error) {
	fake.BuildEventsStub = nil
	fake.buildEventsReturns = struct {
		result1 []db.BuildEvent
		result2 error
	}{result1, result2}
}

var _ buildserver.BuildsDB = new(FakeBuildsDB)
