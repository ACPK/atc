// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/api/containerserver"
	"github.com/concourse/atc/db"
)

type FakeContainerDB struct {
	GetContainerInfoStub        func(handle string) (db.ContainerInfo, bool, error)
	getContainerInfoMutex       sync.RWMutex
	getContainerInfoArgsForCall []struct {
		handle string
	}
	getContainerInfoReturns struct {
		result1 db.ContainerInfo
		result2 bool
		result3 error
	}
	FindContainerInfosByIdentifierStub        func(db.ContainerIdentifier) ([]db.ContainerInfo, error)
	findContainerInfosByIdentifierMutex       sync.RWMutex
	findContainerInfosByIdentifierArgsForCall []struct {
		arg1 db.ContainerIdentifier
	}
	findContainerInfosByIdentifierReturns struct {
		result1 []db.ContainerInfo
		result2 error
	}
}

func (fake *FakeContainerDB) GetContainerInfo(handle string) (db.ContainerInfo, bool, error) {
	fake.getContainerInfoMutex.Lock()
	fake.getContainerInfoArgsForCall = append(fake.getContainerInfoArgsForCall, struct {
		handle string
	}{handle})
	fake.getContainerInfoMutex.Unlock()
	if fake.GetContainerInfoStub != nil {
		return fake.GetContainerInfoStub(handle)
	} else {
		return fake.getContainerInfoReturns.result1, fake.getContainerInfoReturns.result2, fake.getContainerInfoReturns.result3
	}
}

func (fake *FakeContainerDB) GetContainerInfoCallCount() int {
	fake.getContainerInfoMutex.RLock()
	defer fake.getContainerInfoMutex.RUnlock()
	return len(fake.getContainerInfoArgsForCall)
}

func (fake *FakeContainerDB) GetContainerInfoArgsForCall(i int) string {
	fake.getContainerInfoMutex.RLock()
	defer fake.getContainerInfoMutex.RUnlock()
	return fake.getContainerInfoArgsForCall[i].handle
}

func (fake *FakeContainerDB) GetContainerInfoReturns(result1 db.ContainerInfo, result2 bool, result3 error) {
	fake.GetContainerInfoStub = nil
	fake.getContainerInfoReturns = struct {
		result1 db.ContainerInfo
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerDB) FindContainerInfosByIdentifier(arg1 db.ContainerIdentifier) ([]db.ContainerInfo, error) {
	fake.findContainerInfosByIdentifierMutex.Lock()
	fake.findContainerInfosByIdentifierArgsForCall = append(fake.findContainerInfosByIdentifierArgsForCall, struct {
		arg1 db.ContainerIdentifier
	}{arg1})
	fake.findContainerInfosByIdentifierMutex.Unlock()
	if fake.FindContainerInfosByIdentifierStub != nil {
		return fake.FindContainerInfosByIdentifierStub(arg1)
	} else {
		return fake.findContainerInfosByIdentifierReturns.result1, fake.findContainerInfosByIdentifierReturns.result2
	}
}

func (fake *FakeContainerDB) FindContainerInfosByIdentifierCallCount() int {
	fake.findContainerInfosByIdentifierMutex.RLock()
	defer fake.findContainerInfosByIdentifierMutex.RUnlock()
	return len(fake.findContainerInfosByIdentifierArgsForCall)
}

func (fake *FakeContainerDB) FindContainerInfosByIdentifierArgsForCall(i int) db.ContainerIdentifier {
	fake.findContainerInfosByIdentifierMutex.RLock()
	defer fake.findContainerInfosByIdentifierMutex.RUnlock()
	return fake.findContainerInfosByIdentifierArgsForCall[i].arg1
}

func (fake *FakeContainerDB) FindContainerInfosByIdentifierReturns(result1 []db.ContainerInfo, result2 error) {
	fake.FindContainerInfosByIdentifierStub = nil
	fake.findContainerInfosByIdentifierReturns = struct {
		result1 []db.ContainerInfo
		result2 error
	}{result1, result2}
}

var _ containerserver.ContainerDB = new(FakeContainerDB)
