// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/api/resourceserver"
)

type FakeResourceDB struct {
	EnableVersionedResourceStub        func(resourceID int) error
	enableVersionedResourceMutex       sync.RWMutex
	enableVersionedResourceArgsForCall []struct {
		resourceID int
	}
	enableVersionedResourceReturns struct {
		result1 error
	}
	DisableVersionedResourceStub        func(resourceID int) error
	disableVersionedResourceMutex       sync.RWMutex
	disableVersionedResourceArgsForCall []struct {
		resourceID int
	}
	disableVersionedResourceReturns struct {
		result1 error
	}
}

func (fake *FakeResourceDB) EnableVersionedResource(resourceID int) error {
	fake.enableVersionedResourceMutex.Lock()
	fake.enableVersionedResourceArgsForCall = append(fake.enableVersionedResourceArgsForCall, struct {
		resourceID int
	}{resourceID})
	fake.enableVersionedResourceMutex.Unlock()
	if fake.EnableVersionedResourceStub != nil {
		return fake.EnableVersionedResourceStub(resourceID)
	} else {
		return fake.enableVersionedResourceReturns.result1
	}
}

func (fake *FakeResourceDB) EnableVersionedResourceCallCount() int {
	fake.enableVersionedResourceMutex.RLock()
	defer fake.enableVersionedResourceMutex.RUnlock()
	return len(fake.enableVersionedResourceArgsForCall)
}

func (fake *FakeResourceDB) EnableVersionedResourceArgsForCall(i int) int {
	fake.enableVersionedResourceMutex.RLock()
	defer fake.enableVersionedResourceMutex.RUnlock()
	return fake.enableVersionedResourceArgsForCall[i].resourceID
}

func (fake *FakeResourceDB) EnableVersionedResourceReturns(result1 error) {
	fake.EnableVersionedResourceStub = nil
	fake.enableVersionedResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceDB) DisableVersionedResource(resourceID int) error {
	fake.disableVersionedResourceMutex.Lock()
	fake.disableVersionedResourceArgsForCall = append(fake.disableVersionedResourceArgsForCall, struct {
		resourceID int
	}{resourceID})
	fake.disableVersionedResourceMutex.Unlock()
	if fake.DisableVersionedResourceStub != nil {
		return fake.DisableVersionedResourceStub(resourceID)
	} else {
		return fake.disableVersionedResourceReturns.result1
	}
}

func (fake *FakeResourceDB) DisableVersionedResourceCallCount() int {
	fake.disableVersionedResourceMutex.RLock()
	defer fake.disableVersionedResourceMutex.RUnlock()
	return len(fake.disableVersionedResourceArgsForCall)
}

func (fake *FakeResourceDB) DisableVersionedResourceArgsForCall(i int) int {
	fake.disableVersionedResourceMutex.RLock()
	defer fake.disableVersionedResourceMutex.RUnlock()
	return fake.disableVersionedResourceArgsForCall[i].resourceID
}

func (fake *FakeResourceDB) DisableVersionedResourceReturns(result1 error) {
	fake.DisableVersionedResourceStub = nil
	fake.disableVersionedResourceReturns = struct {
		result1 error
	}{result1}
}

var _ resourceserver.ResourceDB = new(FakeResourceDB)
