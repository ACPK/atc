// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/engine"
)

type FakeBuildDB struct {
	GetBuildStub        func(int) (db.Build, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		arg1 int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetBuildEventsStub        func(int, uint) (db.EventSource, error)
	getBuildEventsMutex       sync.RWMutex
	getBuildEventsArgsForCall []struct {
		arg1 int
		arg2 uint
	}
	getBuildEventsReturns struct {
		result1 db.EventSource
		result2 error
	}
	StartBuildStub        func(int, string, string) (bool, error)
	startBuildMutex       sync.RWMutex
	startBuildArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
	}
	startBuildReturns struct {
		result1 bool
		result2 error
	}
	AbortBuildStub        func(int) error
	abortBuildMutex       sync.RWMutex
	abortBuildArgsForCall []struct {
		arg1 int
	}
	abortBuildReturns struct {
		result1 error
	}
	AbortNotifierStub        func(int) (db.Notifier, error)
	abortNotifierMutex       sync.RWMutex
	abortNotifierArgsForCall []struct {
		arg1 int
	}
	abortNotifierReturns struct {
		result1 db.Notifier
		result2 error
	}
	LeaseTrackStub        func(buildID int, interval time.Duration) (db.Lease, bool, error)
	leaseTrackMutex       sync.RWMutex
	leaseTrackArgsForCall []struct {
		buildID  int
		interval time.Duration
	}
	leaseTrackReturns struct {
		result1 db.Lease
		result2 bool
		result3 error
	}
	FinishBuildStub        func(int, db.Status) error
	finishBuildMutex       sync.RWMutex
	finishBuildArgsForCall []struct {
		arg1 int
		arg2 db.Status
	}
	finishBuildReturns struct {
		result1 error
	}
}

func (fake *FakeBuildDB) GetBuild(arg1 int) (db.Build, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(arg1)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2
	}
}

func (fake *FakeBuildDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeBuildDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].arg1
}

func (fake *FakeBuildDB) GetBuildReturns(result1 db.Build, result2 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) GetBuildEvents(arg1 int, arg2 uint) (db.EventSource, error) {
	fake.getBuildEventsMutex.Lock()
	fake.getBuildEventsArgsForCall = append(fake.getBuildEventsArgsForCall, struct {
		arg1 int
		arg2 uint
	}{arg1, arg2})
	fake.getBuildEventsMutex.Unlock()
	if fake.GetBuildEventsStub != nil {
		return fake.GetBuildEventsStub(arg1, arg2)
	} else {
		return fake.getBuildEventsReturns.result1, fake.getBuildEventsReturns.result2
	}
}

func (fake *FakeBuildDB) GetBuildEventsCallCount() int {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return len(fake.getBuildEventsArgsForCall)
}

func (fake *FakeBuildDB) GetBuildEventsArgsForCall(i int) (int, uint) {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return fake.getBuildEventsArgsForCall[i].arg1, fake.getBuildEventsArgsForCall[i].arg2
}

func (fake *FakeBuildDB) GetBuildEventsReturns(result1 db.EventSource, result2 error) {
	fake.GetBuildEventsStub = nil
	fake.getBuildEventsReturns = struct {
		result1 db.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) StartBuild(arg1 int, arg2 string, arg3 string) (bool, error) {
	fake.startBuildMutex.Lock()
	fake.startBuildArgsForCall = append(fake.startBuildArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.startBuildMutex.Unlock()
	if fake.StartBuildStub != nil {
		return fake.StartBuildStub(arg1, arg2, arg3)
	} else {
		return fake.startBuildReturns.result1, fake.startBuildReturns.result2
	}
}

func (fake *FakeBuildDB) StartBuildCallCount() int {
	fake.startBuildMutex.RLock()
	defer fake.startBuildMutex.RUnlock()
	return len(fake.startBuildArgsForCall)
}

func (fake *FakeBuildDB) StartBuildArgsForCall(i int) (int, string, string) {
	fake.startBuildMutex.RLock()
	defer fake.startBuildMutex.RUnlock()
	return fake.startBuildArgsForCall[i].arg1, fake.startBuildArgsForCall[i].arg2, fake.startBuildArgsForCall[i].arg3
}

func (fake *FakeBuildDB) StartBuildReturns(result1 bool, result2 error) {
	fake.StartBuildStub = nil
	fake.startBuildReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) AbortBuild(arg1 int) error {
	fake.abortBuildMutex.Lock()
	fake.abortBuildArgsForCall = append(fake.abortBuildArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.abortBuildMutex.Unlock()
	if fake.AbortBuildStub != nil {
		return fake.AbortBuildStub(arg1)
	} else {
		return fake.abortBuildReturns.result1
	}
}

func (fake *FakeBuildDB) AbortBuildCallCount() int {
	fake.abortBuildMutex.RLock()
	defer fake.abortBuildMutex.RUnlock()
	return len(fake.abortBuildArgsForCall)
}

func (fake *FakeBuildDB) AbortBuildArgsForCall(i int) int {
	fake.abortBuildMutex.RLock()
	defer fake.abortBuildMutex.RUnlock()
	return fake.abortBuildArgsForCall[i].arg1
}

func (fake *FakeBuildDB) AbortBuildReturns(result1 error) {
	fake.AbortBuildStub = nil
	fake.abortBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildDB) AbortNotifier(arg1 int) (db.Notifier, error) {
	fake.abortNotifierMutex.Lock()
	fake.abortNotifierArgsForCall = append(fake.abortNotifierArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.abortNotifierMutex.Unlock()
	if fake.AbortNotifierStub != nil {
		return fake.AbortNotifierStub(arg1)
	} else {
		return fake.abortNotifierReturns.result1, fake.abortNotifierReturns.result2
	}
}

func (fake *FakeBuildDB) AbortNotifierCallCount() int {
	fake.abortNotifierMutex.RLock()
	defer fake.abortNotifierMutex.RUnlock()
	return len(fake.abortNotifierArgsForCall)
}

func (fake *FakeBuildDB) AbortNotifierArgsForCall(i int) int {
	fake.abortNotifierMutex.RLock()
	defer fake.abortNotifierMutex.RUnlock()
	return fake.abortNotifierArgsForCall[i].arg1
}

func (fake *FakeBuildDB) AbortNotifierReturns(result1 db.Notifier, result2 error) {
	fake.AbortNotifierStub = nil
	fake.abortNotifierReturns = struct {
		result1 db.Notifier
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) LeaseTrack(buildID int, interval time.Duration) (db.Lease, bool, error) {
	fake.leaseTrackMutex.Lock()
	fake.leaseTrackArgsForCall = append(fake.leaseTrackArgsForCall, struct {
		buildID  int
		interval time.Duration
	}{buildID, interval})
	fake.leaseTrackMutex.Unlock()
	if fake.LeaseTrackStub != nil {
		return fake.LeaseTrackStub(buildID, interval)
	} else {
		return fake.leaseTrackReturns.result1, fake.leaseTrackReturns.result2, fake.leaseTrackReturns.result3
	}
}

func (fake *FakeBuildDB) LeaseTrackCallCount() int {
	fake.leaseTrackMutex.RLock()
	defer fake.leaseTrackMutex.RUnlock()
	return len(fake.leaseTrackArgsForCall)
}

func (fake *FakeBuildDB) LeaseTrackArgsForCall(i int) (int, time.Duration) {
	fake.leaseTrackMutex.RLock()
	defer fake.leaseTrackMutex.RUnlock()
	return fake.leaseTrackArgsForCall[i].buildID, fake.leaseTrackArgsForCall[i].interval
}

func (fake *FakeBuildDB) LeaseTrackReturns(result1 db.Lease, result2 bool, result3 error) {
	fake.LeaseTrackStub = nil
	fake.leaseTrackReturns = struct {
		result1 db.Lease
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildDB) FinishBuild(arg1 int, arg2 db.Status) error {
	fake.finishBuildMutex.Lock()
	fake.finishBuildArgsForCall = append(fake.finishBuildArgsForCall, struct {
		arg1 int
		arg2 db.Status
	}{arg1, arg2})
	fake.finishBuildMutex.Unlock()
	if fake.FinishBuildStub != nil {
		return fake.FinishBuildStub(arg1, arg2)
	} else {
		return fake.finishBuildReturns.result1
	}
}

func (fake *FakeBuildDB) FinishBuildCallCount() int {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return len(fake.finishBuildArgsForCall)
}

func (fake *FakeBuildDB) FinishBuildArgsForCall(i int) (int, db.Status) {
	fake.finishBuildMutex.RLock()
	defer fake.finishBuildMutex.RUnlock()
	return fake.finishBuildArgsForCall[i].arg1, fake.finishBuildArgsForCall[i].arg2
}

func (fake *FakeBuildDB) FinishBuildReturns(result1 error) {
	fake.FinishBuildStub = nil
	fake.finishBuildReturns = struct {
		result1 error
	}{result1}
}

var _ engine.BuildDB = new(FakeBuildDB)
