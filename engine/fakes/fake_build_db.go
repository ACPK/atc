// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/engine"
)

type FakeBuildDB struct {
	GetBuildStub        func(int) (db.Build, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		arg1 int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetBuildEventsStub        func(int, uint) (db.EventSource, error)
	getBuildEventsMutex       sync.RWMutex
	getBuildEventsArgsForCall []struct {
		arg1 int
		arg2 uint
	}
	getBuildEventsReturns struct {
		result1 db.EventSource
		result2 error
	}
	StartBuildStub        func(int, string, string) (bool, error)
	startBuildMutex       sync.RWMutex
	startBuildArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
	}
	startBuildReturns struct {
		result1 bool
		result2 error
	}
	SaveBuildStatusStub        func(int, db.Status) error
	saveBuildStatusMutex       sync.RWMutex
	saveBuildStatusArgsForCall []struct {
		arg1 int
		arg2 db.Status
	}
	saveBuildStatusReturns struct {
		result1 error
	}
}

func (fake *FakeBuildDB) GetBuild(arg1 int) (db.Build, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(arg1)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2
	}
}

func (fake *FakeBuildDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeBuildDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].arg1
}

func (fake *FakeBuildDB) GetBuildReturns(result1 db.Build, result2 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) GetBuildEvents(arg1 int, arg2 uint) (db.EventSource, error) {
	fake.getBuildEventsMutex.Lock()
	fake.getBuildEventsArgsForCall = append(fake.getBuildEventsArgsForCall, struct {
		arg1 int
		arg2 uint
	}{arg1, arg2})
	fake.getBuildEventsMutex.Unlock()
	if fake.GetBuildEventsStub != nil {
		return fake.GetBuildEventsStub(arg1, arg2)
	} else {
		return fake.getBuildEventsReturns.result1, fake.getBuildEventsReturns.result2
	}
}

func (fake *FakeBuildDB) GetBuildEventsCallCount() int {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return len(fake.getBuildEventsArgsForCall)
}

func (fake *FakeBuildDB) GetBuildEventsArgsForCall(i int) (int, uint) {
	fake.getBuildEventsMutex.RLock()
	defer fake.getBuildEventsMutex.RUnlock()
	return fake.getBuildEventsArgsForCall[i].arg1, fake.getBuildEventsArgsForCall[i].arg2
}

func (fake *FakeBuildDB) GetBuildEventsReturns(result1 db.EventSource, result2 error) {
	fake.GetBuildEventsStub = nil
	fake.getBuildEventsReturns = struct {
		result1 db.EventSource
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) StartBuild(arg1 int, arg2 string, arg3 string) (bool, error) {
	fake.startBuildMutex.Lock()
	fake.startBuildArgsForCall = append(fake.startBuildArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.startBuildMutex.Unlock()
	if fake.StartBuildStub != nil {
		return fake.StartBuildStub(arg1, arg2, arg3)
	} else {
		return fake.startBuildReturns.result1, fake.startBuildReturns.result2
	}
}

func (fake *FakeBuildDB) StartBuildCallCount() int {
	fake.startBuildMutex.RLock()
	defer fake.startBuildMutex.RUnlock()
	return len(fake.startBuildArgsForCall)
}

func (fake *FakeBuildDB) StartBuildArgsForCall(i int) (int, string, string) {
	fake.startBuildMutex.RLock()
	defer fake.startBuildMutex.RUnlock()
	return fake.startBuildArgsForCall[i].arg1, fake.startBuildArgsForCall[i].arg2, fake.startBuildArgsForCall[i].arg3
}

func (fake *FakeBuildDB) StartBuildReturns(result1 bool, result2 error) {
	fake.StartBuildStub = nil
	fake.startBuildReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildDB) SaveBuildStatus(arg1 int, arg2 db.Status) error {
	fake.saveBuildStatusMutex.Lock()
	fake.saveBuildStatusArgsForCall = append(fake.saveBuildStatusArgsForCall, struct {
		arg1 int
		arg2 db.Status
	}{arg1, arg2})
	fake.saveBuildStatusMutex.Unlock()
	if fake.SaveBuildStatusStub != nil {
		return fake.SaveBuildStatusStub(arg1, arg2)
	} else {
		return fake.saveBuildStatusReturns.result1
	}
}

func (fake *FakeBuildDB) SaveBuildStatusCallCount() int {
	fake.saveBuildStatusMutex.RLock()
	defer fake.saveBuildStatusMutex.RUnlock()
	return len(fake.saveBuildStatusArgsForCall)
}

func (fake *FakeBuildDB) SaveBuildStatusArgsForCall(i int) (int, db.Status) {
	fake.saveBuildStatusMutex.RLock()
	defer fake.saveBuildStatusMutex.RUnlock()
	return fake.saveBuildStatusArgsForCall[i].arg1, fake.saveBuildStatusArgsForCall[i].arg2
}

func (fake *FakeBuildDB) SaveBuildStatusReturns(result1 error) {
	fake.SaveBuildStatusStub = nil
	fake.saveBuildStatusReturns = struct {
		result1 error
	}{result1}
}

var _ engine.BuildDB = new(FakeBuildDB)
