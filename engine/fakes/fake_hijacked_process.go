// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/engine"
)

type FakeHijackedProcess struct {
	WaitStub        func() (int, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct{}
	waitReturns     struct {
		result1 int
		result2 error
	}
	SetTTYStub        func(atc.HijackTTYSpec) error
	setTTYMutex       sync.RWMutex
	setTTYArgsForCall []struct {
		arg1 atc.HijackTTYSpec
	}
	setTTYReturns struct {
		result1 error
	}
}

func (fake *FakeHijackedProcess) Wait() (int, error) {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct{}{})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub()
	} else {
		return fake.waitReturns.result1, fake.waitReturns.result2
	}
}

func (fake *FakeHijackedProcess) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeHijackedProcess) WaitReturns(result1 int, result2 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeHijackedProcess) SetTTY(arg1 atc.HijackTTYSpec) error {
	fake.setTTYMutex.Lock()
	fake.setTTYArgsForCall = append(fake.setTTYArgsForCall, struct {
		arg1 atc.HijackTTYSpec
	}{arg1})
	fake.setTTYMutex.Unlock()
	if fake.SetTTYStub != nil {
		return fake.SetTTYStub(arg1)
	} else {
		return fake.setTTYReturns.result1
	}
}

func (fake *FakeHijackedProcess) SetTTYCallCount() int {
	fake.setTTYMutex.RLock()
	defer fake.setTTYMutex.RUnlock()
	return len(fake.setTTYArgsForCall)
}

func (fake *FakeHijackedProcess) SetTTYArgsForCall(i int) atc.HijackTTYSpec {
	fake.setTTYMutex.RLock()
	defer fake.setTTYMutex.RUnlock()
	return fake.setTTYArgsForCall[i].arg1
}

func (fake *FakeHijackedProcess) SetTTYReturns(result1 error) {
	fake.SetTTYStub = nil
	fake.setTTYReturns = struct {
		result1 error
	}{result1}
}

var _ engine.HijackedProcess = new(FakeHijackedProcess)
