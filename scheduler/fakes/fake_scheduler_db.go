// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/builds"
	"github.com/concourse/atc/config"
	"github.com/concourse/atc/scheduler"
)

type FakeSchedulerDB struct {
	CreateBuildWithInputsStub        func(job string, inputs builds.VersionedResources) (builds.Build, error)
	createBuildWithInputsMutex       sync.RWMutex
	createBuildWithInputsArgsForCall []struct {
		job    string
		inputs builds.VersionedResources
	}
	createBuildWithInputsReturns struct {
		result1 builds.Build
		result2 error
	}
	GetLatestInputVersionsStub        func([]config.Input) (builds.VersionedResources, error)
	getLatestInputVersionsMutex       sync.RWMutex
	getLatestInputVersionsArgsForCall []struct {
		arg1 []config.Input
	}
	getLatestInputVersionsReturns struct {
		result1 builds.VersionedResources
		result2 error
	}
	GetJobBuildForInputsStub        func(job string, inputs builds.VersionedResources) (builds.Build, error)
	getJobBuildForInputsMutex       sync.RWMutex
	getJobBuildForInputsArgsForCall []struct {
		job    string
		inputs builds.VersionedResources
	}
	getJobBuildForInputsReturns struct {
		result1 builds.Build
		result2 error
	}
	GetNextPendingBuildStub        func(job string) (builds.Build, builds.VersionedResources, error)
	getNextPendingBuildMutex       sync.RWMutex
	getNextPendingBuildArgsForCall []struct {
		job string
	}
	getNextPendingBuildReturns struct {
		result1 builds.Build
		result2 builds.VersionedResources
		result3 error
	}
}

func (fake *FakeSchedulerDB) CreateBuildWithInputs(job string, inputs builds.VersionedResources) (builds.Build, error) {
	fake.createBuildWithInputsMutex.Lock()
	fake.createBuildWithInputsArgsForCall = append(fake.createBuildWithInputsArgsForCall, struct {
		job    string
		inputs builds.VersionedResources
	}{job, inputs})
	fake.createBuildWithInputsMutex.Unlock()
	if fake.CreateBuildWithInputsStub != nil {
		return fake.CreateBuildWithInputsStub(job, inputs)
	} else {
		return fake.createBuildWithInputsReturns.result1, fake.createBuildWithInputsReturns.result2
	}
}

func (fake *FakeSchedulerDB) CreateBuildWithInputsCallCount() int {
	fake.createBuildWithInputsMutex.RLock()
	defer fake.createBuildWithInputsMutex.RUnlock()
	return len(fake.createBuildWithInputsArgsForCall)
}

func (fake *FakeSchedulerDB) CreateBuildWithInputsArgsForCall(i int) (string, builds.VersionedResources) {
	fake.createBuildWithInputsMutex.RLock()
	defer fake.createBuildWithInputsMutex.RUnlock()
	return fake.createBuildWithInputsArgsForCall[i].job, fake.createBuildWithInputsArgsForCall[i].inputs
}

func (fake *FakeSchedulerDB) CreateBuildWithInputsReturns(result1 builds.Build, result2 error) {
	fake.CreateBuildWithInputsStub = nil
	fake.createBuildWithInputsReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeSchedulerDB) GetLatestInputVersions(arg1 []config.Input) (builds.VersionedResources, error) {
	fake.getLatestInputVersionsMutex.Lock()
	fake.getLatestInputVersionsArgsForCall = append(fake.getLatestInputVersionsArgsForCall, struct {
		arg1 []config.Input
	}{arg1})
	fake.getLatestInputVersionsMutex.Unlock()
	if fake.GetLatestInputVersionsStub != nil {
		return fake.GetLatestInputVersionsStub(arg1)
	} else {
		return fake.getLatestInputVersionsReturns.result1, fake.getLatestInputVersionsReturns.result2
	}
}

func (fake *FakeSchedulerDB) GetLatestInputVersionsCallCount() int {
	fake.getLatestInputVersionsMutex.RLock()
	defer fake.getLatestInputVersionsMutex.RUnlock()
	return len(fake.getLatestInputVersionsArgsForCall)
}

func (fake *FakeSchedulerDB) GetLatestInputVersionsArgsForCall(i int) []config.Input {
	fake.getLatestInputVersionsMutex.RLock()
	defer fake.getLatestInputVersionsMutex.RUnlock()
	return fake.getLatestInputVersionsArgsForCall[i].arg1
}

func (fake *FakeSchedulerDB) GetLatestInputVersionsReturns(result1 builds.VersionedResources, result2 error) {
	fake.GetLatestInputVersionsStub = nil
	fake.getLatestInputVersionsReturns = struct {
		result1 builds.VersionedResources
		result2 error
	}{result1, result2}
}

func (fake *FakeSchedulerDB) GetJobBuildForInputs(job string, inputs builds.VersionedResources) (builds.Build, error) {
	fake.getJobBuildForInputsMutex.Lock()
	fake.getJobBuildForInputsArgsForCall = append(fake.getJobBuildForInputsArgsForCall, struct {
		job    string
		inputs builds.VersionedResources
	}{job, inputs})
	fake.getJobBuildForInputsMutex.Unlock()
	if fake.GetJobBuildForInputsStub != nil {
		return fake.GetJobBuildForInputsStub(job, inputs)
	} else {
		return fake.getJobBuildForInputsReturns.result1, fake.getJobBuildForInputsReturns.result2
	}
}

func (fake *FakeSchedulerDB) GetJobBuildForInputsCallCount() int {
	fake.getJobBuildForInputsMutex.RLock()
	defer fake.getJobBuildForInputsMutex.RUnlock()
	return len(fake.getJobBuildForInputsArgsForCall)
}

func (fake *FakeSchedulerDB) GetJobBuildForInputsArgsForCall(i int) (string, builds.VersionedResources) {
	fake.getJobBuildForInputsMutex.RLock()
	defer fake.getJobBuildForInputsMutex.RUnlock()
	return fake.getJobBuildForInputsArgsForCall[i].job, fake.getJobBuildForInputsArgsForCall[i].inputs
}

func (fake *FakeSchedulerDB) GetJobBuildForInputsReturns(result1 builds.Build, result2 error) {
	fake.GetJobBuildForInputsStub = nil
	fake.getJobBuildForInputsReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeSchedulerDB) GetNextPendingBuild(job string) (builds.Build, builds.VersionedResources, error) {
	fake.getNextPendingBuildMutex.Lock()
	fake.getNextPendingBuildArgsForCall = append(fake.getNextPendingBuildArgsForCall, struct {
		job string
	}{job})
	fake.getNextPendingBuildMutex.Unlock()
	if fake.GetNextPendingBuildStub != nil {
		return fake.GetNextPendingBuildStub(job)
	} else {
		return fake.getNextPendingBuildReturns.result1, fake.getNextPendingBuildReturns.result2, fake.getNextPendingBuildReturns.result3
	}
}

func (fake *FakeSchedulerDB) GetNextPendingBuildCallCount() int {
	fake.getNextPendingBuildMutex.RLock()
	defer fake.getNextPendingBuildMutex.RUnlock()
	return len(fake.getNextPendingBuildArgsForCall)
}

func (fake *FakeSchedulerDB) GetNextPendingBuildArgsForCall(i int) string {
	fake.getNextPendingBuildMutex.RLock()
	defer fake.getNextPendingBuildMutex.RUnlock()
	return fake.getNextPendingBuildArgsForCall[i].job
}

func (fake *FakeSchedulerDB) GetNextPendingBuildReturns(result1 builds.Build, result2 builds.VersionedResources, result3 error) {
	fake.GetNextPendingBuildStub = nil
	fake.getNextPendingBuildReturns = struct {
		result1 builds.Build
		result2 builds.VersionedResources
		result3 error
	}{result1, result2, result3}
}

var _ scheduler.SchedulerDB = new(FakeSchedulerDB)
