// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/auth"
)

type FakeGitHubClient struct {
	GetOrganizationsStub        func(accessToken string) ([]string, error)
	getOrganizationsMutex       sync.RWMutex
	getOrganizationsArgsForCall []struct {
		accessToken string
	}
	getOrganizationsReturns struct {
		result1 []string
		result2 error
	}
}

func (fake *FakeGitHubClient) GetOrganizations(accessToken string) ([]string, error) {
	fake.getOrganizationsMutex.Lock()
	fake.getOrganizationsArgsForCall = append(fake.getOrganizationsArgsForCall, struct {
		accessToken string
	}{accessToken})
	fake.getOrganizationsMutex.Unlock()
	if fake.GetOrganizationsStub != nil {
		return fake.GetOrganizationsStub(accessToken)
	} else {
		return fake.getOrganizationsReturns.result1, fake.getOrganizationsReturns.result2
	}
}

func (fake *FakeGitHubClient) GetOrganizationsCallCount() int {
	fake.getOrganizationsMutex.RLock()
	defer fake.getOrganizationsMutex.RUnlock()
	return len(fake.getOrganizationsArgsForCall)
}

func (fake *FakeGitHubClient) GetOrganizationsArgsForCall(i int) string {
	fake.getOrganizationsMutex.RLock()
	defer fake.getOrganizationsMutex.RUnlock()
	return fake.getOrganizationsArgsForCall[i].accessToken
}

func (fake *FakeGitHubClient) GetOrganizationsReturns(result1 []string, result2 error) {
	fake.GetOrganizationsStub = nil
	fake.getOrganizationsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

var _ auth.GitHubClient = new(FakeGitHubClient)
