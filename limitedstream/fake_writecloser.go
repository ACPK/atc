// This file was generated by counterfeiter,
//
// ...and hand tweaked.
package limitedstream

import (
	"io"
	"sync"
)

type FakeWriteCloser struct {
	WriteStub        func(p []byte) (n int, err error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}

	CloseStub        func() (err error)
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
}

func (fake *FakeWriteCloser) Write(arg1 []byte) (n int, err error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1})
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1)
	} else {
		return fake.writeReturns.result1, fake.writeReturns.result2
	}
}

func (fake *FakeWriteCloser) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeWriteCloser) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].arg1
}

func (fake *FakeWriteCloser) WriteReturns(result1 int, result2 error) {
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWriteCloser) Close() (err error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeWriteCloser) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeWriteCloser) CloseReturns(result1 error) {
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

var _ io.WriteCloser = new(FakeWriteCloser)
