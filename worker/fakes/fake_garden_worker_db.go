// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/worker"
)

type FakeGardenWorkerDB struct {
	CreateContainerInfoStub        func(db.ContainerInfo, time.Duration) error
	createContainerInfoMutex       sync.RWMutex
	createContainerInfoArgsForCall []struct {
		arg1 db.ContainerInfo
		arg2 time.Duration
	}
	createContainerInfoReturns struct {
		result1 error
	}
	UpdateExpiresAtOnContainerInfoStub        func(handle string, ttl time.Duration) error
	updateExpiresAtOnContainerInfoMutex       sync.RWMutex
	updateExpiresAtOnContainerInfoArgsForCall []struct {
		handle string
		ttl    time.Duration
	}
	updateExpiresAtOnContainerInfoReturns struct {
		result1 error
	}
}

func (fake *FakeGardenWorkerDB) CreateContainerInfo(arg1 db.ContainerInfo, arg2 time.Duration) error {
	fake.createContainerInfoMutex.Lock()
	fake.createContainerInfoArgsForCall = append(fake.createContainerInfoArgsForCall, struct {
		arg1 db.ContainerInfo
		arg2 time.Duration
	}{arg1, arg2})
	fake.createContainerInfoMutex.Unlock()
	if fake.CreateContainerInfoStub != nil {
		return fake.CreateContainerInfoStub(arg1, arg2)
	} else {
		return fake.createContainerInfoReturns.result1
	}
}

func (fake *FakeGardenWorkerDB) CreateContainerInfoCallCount() int {
	fake.createContainerInfoMutex.RLock()
	defer fake.createContainerInfoMutex.RUnlock()
	return len(fake.createContainerInfoArgsForCall)
}

func (fake *FakeGardenWorkerDB) CreateContainerInfoArgsForCall(i int) (db.ContainerInfo, time.Duration) {
	fake.createContainerInfoMutex.RLock()
	defer fake.createContainerInfoMutex.RUnlock()
	return fake.createContainerInfoArgsForCall[i].arg1, fake.createContainerInfoArgsForCall[i].arg2
}

func (fake *FakeGardenWorkerDB) CreateContainerInfoReturns(result1 error) {
	fake.CreateContainerInfoStub = nil
	fake.createContainerInfoReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGardenWorkerDB) UpdateExpiresAtOnContainerInfo(handle string, ttl time.Duration) error {
	fake.updateExpiresAtOnContainerInfoMutex.Lock()
	fake.updateExpiresAtOnContainerInfoArgsForCall = append(fake.updateExpiresAtOnContainerInfoArgsForCall, struct {
		handle string
		ttl    time.Duration
	}{handle, ttl})
	fake.updateExpiresAtOnContainerInfoMutex.Unlock()
	if fake.UpdateExpiresAtOnContainerInfoStub != nil {
		return fake.UpdateExpiresAtOnContainerInfoStub(handle, ttl)
	} else {
		return fake.updateExpiresAtOnContainerInfoReturns.result1
	}
}

func (fake *FakeGardenWorkerDB) UpdateExpiresAtOnContainerInfoCallCount() int {
	fake.updateExpiresAtOnContainerInfoMutex.RLock()
	defer fake.updateExpiresAtOnContainerInfoMutex.RUnlock()
	return len(fake.updateExpiresAtOnContainerInfoArgsForCall)
}

func (fake *FakeGardenWorkerDB) UpdateExpiresAtOnContainerInfoArgsForCall(i int) (string, time.Duration) {
	fake.updateExpiresAtOnContainerInfoMutex.RLock()
	defer fake.updateExpiresAtOnContainerInfoMutex.RUnlock()
	return fake.updateExpiresAtOnContainerInfoArgsForCall[i].handle, fake.updateExpiresAtOnContainerInfoArgsForCall[i].ttl
}

func (fake *FakeGardenWorkerDB) UpdateExpiresAtOnContainerInfoReturns(result1 error) {
	fake.UpdateExpiresAtOnContainerInfoStub = nil
	fake.updateExpiresAtOnContainerInfoReturns = struct {
		result1 error
	}{result1}
}

var _ worker.GardenWorkerDB = new(FakeGardenWorkerDB)
