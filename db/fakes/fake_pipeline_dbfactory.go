// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakePipelineDBFactory struct {
	BuildStub        func(pipeline db.SavedPipeline) db.PipelineDB
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		pipeline db.SavedPipeline
	}
	buildReturns struct {
		result1 db.PipelineDB
	}
	BuildWithNameStub        func(pipelineName string) (db.PipelineDB, error)
	buildWithNameMutex       sync.RWMutex
	buildWithNameArgsForCall []struct {
		pipelineName string
	}
	buildWithNameReturns struct {
		result1 db.PipelineDB
		result2 error
	}
	BuildDefaultStub        func() (db.PipelineDB, error)
	buildDefaultMutex       sync.RWMutex
	buildDefaultArgsForCall []struct{}
	buildDefaultReturns struct {
		result1 db.PipelineDB
		result2 error
	}
}

func (fake *FakePipelineDBFactory) Build(pipeline db.SavedPipeline) db.PipelineDB {
	fake.buildMutex.Lock()
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		pipeline db.SavedPipeline
	}{pipeline})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(pipeline)
	} else {
		return fake.buildReturns.result1
	}
}

func (fake *FakePipelineDBFactory) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakePipelineDBFactory) BuildArgsForCall(i int) db.SavedPipeline {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.buildArgsForCall[i].pipeline
}

func (fake *FakePipelineDBFactory) BuildReturns(result1 db.PipelineDB) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 db.PipelineDB
	}{result1}
}

func (fake *FakePipelineDBFactory) BuildWithName(pipelineName string) (db.PipelineDB, error) {
	fake.buildWithNameMutex.Lock()
	fake.buildWithNameArgsForCall = append(fake.buildWithNameArgsForCall, struct {
		pipelineName string
	}{pipelineName})
	fake.buildWithNameMutex.Unlock()
	if fake.BuildWithNameStub != nil {
		return fake.BuildWithNameStub(pipelineName)
	} else {
		return fake.buildWithNameReturns.result1, fake.buildWithNameReturns.result2
	}
}

func (fake *FakePipelineDBFactory) BuildWithNameCallCount() int {
	fake.buildWithNameMutex.RLock()
	defer fake.buildWithNameMutex.RUnlock()
	return len(fake.buildWithNameArgsForCall)
}

func (fake *FakePipelineDBFactory) BuildWithNameArgsForCall(i int) string {
	fake.buildWithNameMutex.RLock()
	defer fake.buildWithNameMutex.RUnlock()
	return fake.buildWithNameArgsForCall[i].pipelineName
}

func (fake *FakePipelineDBFactory) BuildWithNameReturns(result1 db.PipelineDB, result2 error) {
	fake.BuildWithNameStub = nil
	fake.buildWithNameReturns = struct {
		result1 db.PipelineDB
		result2 error
	}{result1, result2}
}

func (fake *FakePipelineDBFactory) BuildDefault() (db.PipelineDB, error) {
	fake.buildDefaultMutex.Lock()
	fake.buildDefaultArgsForCall = append(fake.buildDefaultArgsForCall, struct{}{})
	fake.buildDefaultMutex.Unlock()
	if fake.BuildDefaultStub != nil {
		return fake.BuildDefaultStub()
	} else {
		return fake.buildDefaultReturns.result1, fake.buildDefaultReturns.result2
	}
}

func (fake *FakePipelineDBFactory) BuildDefaultCallCount() int {
	fake.buildDefaultMutex.RLock()
	defer fake.buildDefaultMutex.RUnlock()
	return len(fake.buildDefaultArgsForCall)
}

func (fake *FakePipelineDBFactory) BuildDefaultReturns(result1 db.PipelineDB, result2 error) {
	fake.BuildDefaultStub = nil
	fake.buildDefaultReturns = struct {
		result1 db.PipelineDB
		result2 error
	}{result1, result2}
}

var _ db.PipelineDBFactory = new(FakePipelineDBFactory)
