// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakePipelinesDB struct {
	GetAllActivePipelinesStub        func() ([]db.SavedPipeline, error)
	getAllActivePipelinesMutex       sync.RWMutex
	getAllActivePipelinesArgsForCall []struct{}
	getAllActivePipelinesReturns     struct {
		result1 []db.SavedPipeline
		result2 error
	}
	GetPipelineByNameStub        func(pipelineName string) (db.SavedPipeline, error)
	getPipelineByNameMutex       sync.RWMutex
	getPipelineByNameArgsForCall []struct {
		pipelineName string
	}
	getPipelineByNameReturns struct {
		result1 db.SavedPipeline
		result2 error
	}
	OrderPipelinesStub        func([]string) error
	orderPipelinesMutex       sync.RWMutex
	orderPipelinesArgsForCall []struct {
		arg1 []string
	}
	orderPipelinesReturns struct {
		result1 error
	}
}

func (fake *FakePipelinesDB) GetAllActivePipelines() ([]db.SavedPipeline, error) {
	fake.getAllActivePipelinesMutex.Lock()
	fake.getAllActivePipelinesArgsForCall = append(fake.getAllActivePipelinesArgsForCall, struct{}{})
	fake.getAllActivePipelinesMutex.Unlock()
	if fake.GetAllActivePipelinesStub != nil {
		return fake.GetAllActivePipelinesStub()
	} else {
		return fake.getAllActivePipelinesReturns.result1, fake.getAllActivePipelinesReturns.result2
	}
}

func (fake *FakePipelinesDB) GetAllActivePipelinesCallCount() int {
	fake.getAllActivePipelinesMutex.RLock()
	defer fake.getAllActivePipelinesMutex.RUnlock()
	return len(fake.getAllActivePipelinesArgsForCall)
}

func (fake *FakePipelinesDB) GetAllActivePipelinesReturns(result1 []db.SavedPipeline, result2 error) {
	fake.GetAllActivePipelinesStub = nil
	fake.getAllActivePipelinesReturns = struct {
		result1 []db.SavedPipeline
		result2 error
	}{result1, result2}
}

func (fake *FakePipelinesDB) GetPipelineByName(pipelineName string) (db.SavedPipeline, error) {
	fake.getPipelineByNameMutex.Lock()
	fake.getPipelineByNameArgsForCall = append(fake.getPipelineByNameArgsForCall, struct {
		pipelineName string
	}{pipelineName})
	fake.getPipelineByNameMutex.Unlock()
	if fake.GetPipelineByNameStub != nil {
		return fake.GetPipelineByNameStub(pipelineName)
	} else {
		return fake.getPipelineByNameReturns.result1, fake.getPipelineByNameReturns.result2
	}
}

func (fake *FakePipelinesDB) GetPipelineByNameCallCount() int {
	fake.getPipelineByNameMutex.RLock()
	defer fake.getPipelineByNameMutex.RUnlock()
	return len(fake.getPipelineByNameArgsForCall)
}

func (fake *FakePipelinesDB) GetPipelineByNameArgsForCall(i int) string {
	fake.getPipelineByNameMutex.RLock()
	defer fake.getPipelineByNameMutex.RUnlock()
	return fake.getPipelineByNameArgsForCall[i].pipelineName
}

func (fake *FakePipelinesDB) GetPipelineByNameReturns(result1 db.SavedPipeline, result2 error) {
	fake.GetPipelineByNameStub = nil
	fake.getPipelineByNameReturns = struct {
		result1 db.SavedPipeline
		result2 error
	}{result1, result2}
}

func (fake *FakePipelinesDB) OrderPipelines(arg1 []string) error {
	fake.orderPipelinesMutex.Lock()
	fake.orderPipelinesArgsForCall = append(fake.orderPipelinesArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.orderPipelinesMutex.Unlock()
	if fake.OrderPipelinesStub != nil {
		return fake.OrderPipelinesStub(arg1)
	} else {
		return fake.orderPipelinesReturns.result1
	}
}

func (fake *FakePipelinesDB) OrderPipelinesCallCount() int {
	fake.orderPipelinesMutex.RLock()
	defer fake.orderPipelinesMutex.RUnlock()
	return len(fake.orderPipelinesArgsForCall)
}

func (fake *FakePipelinesDB) OrderPipelinesArgsForCall(i int) []string {
	fake.orderPipelinesMutex.RLock()
	defer fake.orderPipelinesMutex.RUnlock()
	return fake.orderPipelinesArgsForCall[i].arg1
}

func (fake *FakePipelinesDB) OrderPipelinesReturns(result1 error) {
	fake.OrderPipelinesStub = nil
	fake.orderPipelinesReturns = struct {
		result1 error
	}{result1}
}

var _ db.PipelinesDB = new(FakePipelinesDB)
