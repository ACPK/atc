// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeJobServiceDB struct {
	GetBuildStub        func(buildID int) (db.Build, error)
	getBuildMutex       sync.RWMutex
	getBuildArgsForCall []struct {
		buildID int
	}
	getBuildReturns struct {
		result1 db.Build
		result2 error
	}
	GetJobStub        func(job string) (db.Job, error)
	getJobMutex       sync.RWMutex
	getJobArgsForCall []struct {
		job string
	}
	getJobReturns struct {
		result1 db.Job
		result2 error
	}
	GetRunningBuildsByJobStub        func(job string) ([]db.Build, error)
	getRunningBuildsByJobMutex       sync.RWMutex
	getRunningBuildsByJobArgsForCall []struct {
		job string
	}
	getRunningBuildsByJobReturns struct {
		result1 []db.Build
		result2 error
	}
	GetNextPendingBuildStub        func(job string) (db.Build, []db.BuildInput, error)
	getNextPendingBuildMutex       sync.RWMutex
	getNextPendingBuildArgsForCall []struct {
		job string
	}
	getNextPendingBuildReturns struct {
		result1 db.Build
		result2 []db.BuildInput
		result3 error
	}
}

func (fake *FakeJobServiceDB) GetBuild(buildID int) (db.Build, error) {
	fake.getBuildMutex.Lock()
	fake.getBuildArgsForCall = append(fake.getBuildArgsForCall, struct {
		buildID int
	}{buildID})
	fake.getBuildMutex.Unlock()
	if fake.GetBuildStub != nil {
		return fake.GetBuildStub(buildID)
	} else {
		return fake.getBuildReturns.result1, fake.getBuildReturns.result2
	}
}

func (fake *FakeJobServiceDB) GetBuildCallCount() int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return len(fake.getBuildArgsForCall)
}

func (fake *FakeJobServiceDB) GetBuildArgsForCall(i int) int {
	fake.getBuildMutex.RLock()
	defer fake.getBuildMutex.RUnlock()
	return fake.getBuildArgsForCall[i].buildID
}

func (fake *FakeJobServiceDB) GetBuildReturns(result1 db.Build, result2 error) {
	fake.GetBuildStub = nil
	fake.getBuildReturns = struct {
		result1 db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeJobServiceDB) GetJob(job string) (db.Job, error) {
	fake.getJobMutex.Lock()
	fake.getJobArgsForCall = append(fake.getJobArgsForCall, struct {
		job string
	}{job})
	fake.getJobMutex.Unlock()
	if fake.GetJobStub != nil {
		return fake.GetJobStub(job)
	} else {
		return fake.getJobReturns.result1, fake.getJobReturns.result2
	}
}

func (fake *FakeJobServiceDB) GetJobCallCount() int {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	return len(fake.getJobArgsForCall)
}

func (fake *FakeJobServiceDB) GetJobArgsForCall(i int) string {
	fake.getJobMutex.RLock()
	defer fake.getJobMutex.RUnlock()
	return fake.getJobArgsForCall[i].job
}

func (fake *FakeJobServiceDB) GetJobReturns(result1 db.Job, result2 error) {
	fake.GetJobStub = nil
	fake.getJobReturns = struct {
		result1 db.Job
		result2 error
	}{result1, result2}
}

func (fake *FakeJobServiceDB) GetRunningBuildsByJob(job string) ([]db.Build, error) {
	fake.getRunningBuildsByJobMutex.Lock()
	fake.getRunningBuildsByJobArgsForCall = append(fake.getRunningBuildsByJobArgsForCall, struct {
		job string
	}{job})
	fake.getRunningBuildsByJobMutex.Unlock()
	if fake.GetRunningBuildsByJobStub != nil {
		return fake.GetRunningBuildsByJobStub(job)
	} else {
		return fake.getRunningBuildsByJobReturns.result1, fake.getRunningBuildsByJobReturns.result2
	}
}

func (fake *FakeJobServiceDB) GetRunningBuildsByJobCallCount() int {
	fake.getRunningBuildsByJobMutex.RLock()
	defer fake.getRunningBuildsByJobMutex.RUnlock()
	return len(fake.getRunningBuildsByJobArgsForCall)
}

func (fake *FakeJobServiceDB) GetRunningBuildsByJobArgsForCall(i int) string {
	fake.getRunningBuildsByJobMutex.RLock()
	defer fake.getRunningBuildsByJobMutex.RUnlock()
	return fake.getRunningBuildsByJobArgsForCall[i].job
}

func (fake *FakeJobServiceDB) GetRunningBuildsByJobReturns(result1 []db.Build, result2 error) {
	fake.GetRunningBuildsByJobStub = nil
	fake.getRunningBuildsByJobReturns = struct {
		result1 []db.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeJobServiceDB) GetNextPendingBuild(job string) (db.Build, []db.BuildInput, error) {
	fake.getNextPendingBuildMutex.Lock()
	fake.getNextPendingBuildArgsForCall = append(fake.getNextPendingBuildArgsForCall, struct {
		job string
	}{job})
	fake.getNextPendingBuildMutex.Unlock()
	if fake.GetNextPendingBuildStub != nil {
		return fake.GetNextPendingBuildStub(job)
	} else {
		return fake.getNextPendingBuildReturns.result1, fake.getNextPendingBuildReturns.result2, fake.getNextPendingBuildReturns.result3
	}
}

func (fake *FakeJobServiceDB) GetNextPendingBuildCallCount() int {
	fake.getNextPendingBuildMutex.RLock()
	defer fake.getNextPendingBuildMutex.RUnlock()
	return len(fake.getNextPendingBuildArgsForCall)
}

func (fake *FakeJobServiceDB) GetNextPendingBuildArgsForCall(i int) string {
	fake.getNextPendingBuildMutex.RLock()
	defer fake.getNextPendingBuildMutex.RUnlock()
	return fake.getNextPendingBuildArgsForCall[i].job
}

func (fake *FakeJobServiceDB) GetNextPendingBuildReturns(result1 db.Build, result2 []db.BuildInput, result3 error) {
	fake.GetNextPendingBuildStub = nil
	fake.getNextPendingBuildReturns = struct {
		result1 db.Build
		result2 []db.BuildInput
		result3 error
	}{result1, result2, result3}
}

var _ db.JobServiceDB = new(FakeJobServiceDB)
