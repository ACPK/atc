// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeBuildEventSource struct {
	NextStub        func() (db.BuildEvent, error)
	nextMutex       sync.RWMutex
	nextArgsForCall []struct{}
	nextReturns struct {
		result1 db.BuildEvent
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns struct {
		result1 error
	}
}

func (fake *FakeBuildEventSource) Next() (db.BuildEvent, error) {
	fake.nextMutex.Lock()
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct{}{})
	fake.nextMutex.Unlock()
	if fake.NextStub != nil {
		return fake.NextStub()
	} else {
		return fake.nextReturns.result1, fake.nextReturns.result2
	}
}

func (fake *FakeBuildEventSource) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeBuildEventSource) NextReturns(result1 db.BuildEvent, result2 error) {
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 db.BuildEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeBuildEventSource) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeBuildEventSource) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeBuildEventSource) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

var _ db.BuildEventSource = new(FakeBuildEventSource)
