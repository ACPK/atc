// This file was generated by counterfeiter
package fakequeuer

import (
	"github.com/winston-ci/winston/builds"
	"github.com/winston-ci/winston/config"

	"sync"
)

type FakeQueuer struct {
	TriggerStub        func(config.Job) (builds.Build, error)
	triggerMutex       sync.RWMutex
	triggerArgsForCall []struct {
		arg1 config.Job
	}
	triggerReturns struct {
		result1 builds.Build
		result2 error
	}
	EnqueueStub        func(config.Job, config.Resource, builds.Version) (builds.Build, error)
	enqueueMutex       sync.RWMutex
	enqueueArgsForCall []struct {
		arg1 config.Job
		arg2 config.Resource
		arg3 builds.Version
	}
	enqueueReturns struct {
		result1 builds.Build
		result2 error
	}
}

func (fake *FakeQueuer) Trigger(arg1 config.Job) (builds.Build, error) {
	fake.triggerMutex.Lock()
	defer fake.triggerMutex.Unlock()
	fake.triggerArgsForCall = append(fake.triggerArgsForCall, struct {
		arg1 config.Job
	}{arg1})
	if fake.TriggerStub != nil {
		return fake.TriggerStub(arg1)
	} else {
		return fake.triggerReturns.result1, fake.triggerReturns.result2
	}
}

func (fake *FakeQueuer) TriggerCallCount() int {
	fake.triggerMutex.RLock()
	defer fake.triggerMutex.RUnlock()
	return len(fake.triggerArgsForCall)
}

func (fake *FakeQueuer) TriggerArgsForCall(i int) config.Job {
	fake.triggerMutex.RLock()
	defer fake.triggerMutex.RUnlock()
	return fake.triggerArgsForCall[i].arg1
}

func (fake *FakeQueuer) TriggerReturns(result1 builds.Build, result2 error) {
	fake.triggerReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}

func (fake *FakeQueuer) Enqueue(arg1 config.Job, arg2 config.Resource, arg3 builds.Version) (builds.Build, error) {
	fake.enqueueMutex.Lock()
	defer fake.enqueueMutex.Unlock()
	fake.enqueueArgsForCall = append(fake.enqueueArgsForCall, struct {
		arg1 config.Job
		arg2 config.Resource
		arg3 builds.Version
	}{arg1, arg2, arg3})
	if fake.EnqueueStub != nil {
		return fake.EnqueueStub(arg1, arg2, arg3)
	} else {
		return fake.enqueueReturns.result1, fake.enqueueReturns.result2
	}
}

func (fake *FakeQueuer) EnqueueCallCount() int {
	fake.enqueueMutex.RLock()
	defer fake.enqueueMutex.RUnlock()
	return len(fake.enqueueArgsForCall)
}

func (fake *FakeQueuer) EnqueueArgsForCall(i int) (config.Job, config.Resource, builds.Version) {
	fake.enqueueMutex.RLock()
	defer fake.enqueueMutex.RUnlock()
	return fake.enqueueArgsForCall[i].arg1, fake.enqueueArgsForCall[i].arg2, fake.enqueueArgsForCall[i].arg3
}

func (fake *FakeQueuer) EnqueueReturns(result1 builds.Build, result2 error) {
	fake.enqueueReturns = struct {
		result1 builds.Build
		result2 error
	}{result1, result2}
}
