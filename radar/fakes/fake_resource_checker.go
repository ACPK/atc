// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/atc/builds"
	"github.com/concourse/atc/config"
	"github.com/concourse/atc/radar"
)

type FakeResourceChecker struct {
	CheckResourceStub        func(config.Resource, builds.Version) ([]builds.Version, error)
	checkResourceMutex       sync.RWMutex
	checkResourceArgsForCall []struct {
		arg1 config.Resource
		arg2 builds.Version
	}
	checkResourceReturns struct {
		result1 []builds.Version
		result2 error
	}
}

func (fake *FakeResourceChecker) CheckResource(arg1 config.Resource, arg2 builds.Version) ([]builds.Version, error) {
	fake.checkResourceMutex.Lock()
	defer fake.checkResourceMutex.Unlock()
	fake.checkResourceArgsForCall = append(fake.checkResourceArgsForCall, struct {
		arg1 config.Resource
		arg2 builds.Version
	}{arg1, arg2})
	if fake.CheckResourceStub != nil {
		return fake.CheckResourceStub(arg1, arg2)
	} else {
		return fake.checkResourceReturns.result1, fake.checkResourceReturns.result2
	}
}

func (fake *FakeResourceChecker) CheckResourceCallCount() int {
	fake.checkResourceMutex.RLock()
	defer fake.checkResourceMutex.RUnlock()
	return len(fake.checkResourceArgsForCall)
}

func (fake *FakeResourceChecker) CheckResourceArgsForCall(i int) (config.Resource, builds.Version) {
	fake.checkResourceMutex.RLock()
	defer fake.checkResourceMutex.RUnlock()
	return fake.checkResourceArgsForCall[i].arg1, fake.checkResourceArgsForCall[i].arg2
}

func (fake *FakeResourceChecker) CheckResourceReturns(result1 []builds.Version, result2 error) {
	fake.CheckResourceStub = nil
	fake.checkResourceReturns = struct {
		result1 []builds.Version
		result2 error
	}{result1, result2}
}

var _ radar.ResourceChecker = new(FakeResourceChecker)
