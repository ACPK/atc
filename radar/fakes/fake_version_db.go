// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"github.com/concourse/atc/builds"
	"github.com/concourse/atc/radar"
)

type FakeVersionDB struct {
	SaveVersionedResourceStub        func(builds.VersionedResource) error
	saveVersionedResourceMutex       sync.RWMutex
	saveVersionedResourceArgsForCall []struct {
		arg1 builds.VersionedResource
	}
	saveVersionedResourceReturns struct {
		result1 error
	}
	GetLatestVersionedResourceStub        func(string) (builds.VersionedResource, error)
	getLatestVersionedResourceMutex       sync.RWMutex
	getLatestVersionedResourceArgsForCall []struct {
		arg1 string
	}
	getLatestVersionedResourceReturns struct {
		result1 builds.VersionedResource
		result2 error
	}
}

func (fake *FakeVersionDB) SaveVersionedResource(arg1 builds.VersionedResource) error {
	fake.saveVersionedResourceMutex.Lock()
	defer fake.saveVersionedResourceMutex.Unlock()
	fake.saveVersionedResourceArgsForCall = append(fake.saveVersionedResourceArgsForCall, struct {
		arg1 builds.VersionedResource
	}{arg1})
	if fake.SaveVersionedResourceStub != nil {
		return fake.SaveVersionedResourceStub(arg1)
	} else {
		return fake.saveVersionedResourceReturns.result1
	}
}

func (fake *FakeVersionDB) SaveVersionedResourceCallCount() int {
	fake.saveVersionedResourceMutex.RLock()
	defer fake.saveVersionedResourceMutex.RUnlock()
	return len(fake.saveVersionedResourceArgsForCall)
}

func (fake *FakeVersionDB) SaveVersionedResourceArgsForCall(i int) builds.VersionedResource {
	fake.saveVersionedResourceMutex.RLock()
	defer fake.saveVersionedResourceMutex.RUnlock()
	return fake.saveVersionedResourceArgsForCall[i].arg1
}

func (fake *FakeVersionDB) SaveVersionedResourceReturns(result1 error) {
	fake.SaveVersionedResourceStub = nil
	fake.saveVersionedResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVersionDB) GetLatestVersionedResource(arg1 string) (builds.VersionedResource, error) {
	fake.getLatestVersionedResourceMutex.Lock()
	defer fake.getLatestVersionedResourceMutex.Unlock()
	fake.getLatestVersionedResourceArgsForCall = append(fake.getLatestVersionedResourceArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.GetLatestVersionedResourceStub != nil {
		return fake.GetLatestVersionedResourceStub(arg1)
	} else {
		return fake.getLatestVersionedResourceReturns.result1, fake.getLatestVersionedResourceReturns.result2
	}
}

func (fake *FakeVersionDB) GetLatestVersionedResourceCallCount() int {
	fake.getLatestVersionedResourceMutex.RLock()
	defer fake.getLatestVersionedResourceMutex.RUnlock()
	return len(fake.getLatestVersionedResourceArgsForCall)
}

func (fake *FakeVersionDB) GetLatestVersionedResourceArgsForCall(i int) string {
	fake.getLatestVersionedResourceMutex.RLock()
	defer fake.getLatestVersionedResourceMutex.RUnlock()
	return fake.getLatestVersionedResourceArgsForCall[i].arg1
}

func (fake *FakeVersionDB) GetLatestVersionedResourceReturns(result1 builds.VersionedResource, result2 error) {
	fake.GetLatestVersionedResourceStub = nil
	fake.getLatestVersionedResourceReturns = struct {
		result1 builds.VersionedResource
		result2 error
	}{result1, result2}
}

var _ radar.VersionDB = new(FakeVersionDB)
